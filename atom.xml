<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Chenggoi's Blog]]></title>
  <subtitle><![CDATA[工作虽然很开心但也不要忘记休息哦～～]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://chenggoi.com/"/>
  <updated>2015-03-17T10:44:01.460Z</updated>
  <id>http://chenggoi.com/</id>
  
  <author>
    <name><![CDATA[Chenggoi]]></name>
    <email><![CDATA[chenggoi@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android 4.2 UA信息获取]]></title>
    <link href="http://chenggoi.com/2015/03/17/UA-Info/"/>
    <id>http://chenggoi.com/2015/03/17/UA-Info/</id>
    <published>2015-03-17T10:12:13.000Z</published>
    <updated>2015-03-17T10:43:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Unubtu <span class="number">14.04</span>
Android：<span class="number">4.2</span><span class="number">.2</span>
gcc：<span class="number">4.4</span>
java：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><h2 id="获取UA信息">获取UA信息</h2>
<ul>
<li>通过调用<code>Android</code>自带的<code>WebSettings.getCurrentUserAgent()</code>方法即可：</li>
</ul>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UAInfo</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{

    TextView mUAInfoView = <span class="keyword">null</span>;
    WebView mWebView = <span class="keyword">null</span>;
    String mUAString = <span class="keyword">null</span>;

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle paramBundle)
    {
    <span class="keyword">super</span>.onCreate(paramBundle);
    setContentView(R.layout.uainfo);

    mUAInfoView=(TextView)findViewById(R.id.uainfo);
    mWebView = <span class="keyword">new</span> WebView(<span class="keyword">this</span>);
    mWebView.layout(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);
    WebSettings mWebSettings = mWebView.getSettings();
    mUAString = mWebSettings.getUserAgentString();
    mUAInfoView.setText(mUAString);
    }
}
</code></pre><h2 id="获取信息解析">获取信息解析</h2>
<ul>
<li><p>通过上述方法我们可以得到如下信息：</p>
<p>  Mozilla/5.0 (Linux; U; Android $(VERSION) ; $(LOCALE) ; $(MODEL) Build/$(BUILD) ) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</p>
</li>
<li><p>先说结论，其中：</p>
</li>
<li><code>$(VERSION)</code>的值为<code>build.prop</code>中<code>ro.build.version.release</code>字段的值</li>
<li><code>$(LOCALE)</code>的值为当前系统中的语言设置的值</li>
<li><code>$(MODEL)</code>的值为<code>build.prop</code>中<code>ro.product.model</code>字段的值</li>
<li><code>$(BUILD)</code>的值为<code>build.prop</code>中<code>ro.build.id</code>字段的值</li>
<li><p>后面附上系统源码的实现方式</p>
<pre><code>  <span class="keyword">private</span> <span class="keyword">synchronized</span> String getCurrentUserAgent() {
     Locale locale;
     <span class="keyword">synchronized</span>(sLockForLocaleSettings) {
     locale = sLocale;
     }
     <span class="keyword">return</span> getDefaultUserAgentForLocale(mContext, locale);
  }
  <span class="keyword">public</span> <span class="keyword">static</span> String getDefaultUserAgentForLocale(Context context, Locale locale) {
  StringBuffer buffer = <span class="keyword">new</span> StringBuffer();
  <span class="comment">// Add version</span>
  <span class="keyword">final</span> String version = Build.VERSION.RELEASE;
  <span class="keyword">if</span> (version.length() &gt; <span class="number">0</span>) {
      <span class="keyword">if</span> (Character.isDigit(version.charAt(<span class="number">0</span>))) {
          <span class="comment">// Release is a version, eg "3.1"</span>
          buffer.<span class="keyword">append</span>(version);
      } <span class="keyword">else</span> {
          <span class="comment">// Release is a codename, eg "Honeycomb"</span>
          <span class="comment">// In this case, use the previous release's version</span>
          buffer.<span class="keyword">append</span>(PREVIOUS_VERSION);
      }
  } <span class="keyword">else</span> {
      <span class="comment">// default to "1.0"</span>
      buffer.<span class="keyword">append</span>(<span class="string">"1.0"</span>);
  }
  buffer.<span class="keyword">append</span>(<span class="string">"; "</span>);
  <span class="keyword">final</span> String language = locale.getLanguage();
  <span class="keyword">if</span> (language != <span class="keyword">null</span>) {
      buffer.<span class="keyword">append</span>(convertObsoleteLanguageCodeToNew(language));
      <span class="keyword">final</span> String country = locale.getCountry();
      <span class="keyword">if</span> (country != <span class="keyword">null</span>) {
          buffer.<span class="keyword">append</span>(<span class="string">"-"</span>);
          buffer.<span class="keyword">append</span>(country.toLowerCase());
      }
  } <span class="keyword">else</span> {
      <span class="comment">// default to "en"</span>
      buffer.<span class="keyword">append</span>(<span class="string">"en"</span>);
  }
  buffer.<span class="keyword">append</span>(<span class="string">";"</span>);
  <span class="comment">// add the model for the release build</span>
  <span class="keyword">if</span> (<span class="string">"REL"</span>.equals(Build.VERSION.CODENAME)) {
      <span class="keyword">final</span> String model = Build.MODEL;
      <span class="keyword">if</span> (model.length() &gt; <span class="number">0</span>) {
          buffer.<span class="keyword">append</span>(<span class="string">" "</span>);
          buffer.<span class="keyword">append</span>(model);
      }
  }
  <span class="keyword">final</span> String id = Build.ID;
  <span class="keyword">if</span> (id.length() &gt; <span class="number">0</span>) {
      buffer.<span class="keyword">append</span>(<span class="string">" Build/"</span>);
      buffer.<span class="keyword">append</span>(id);
  }
  String mobile = context.getResources().<span class="keyword">getText</span>(
      com.android.internal.R.string.web_user_agent_target_content).toString();
  <span class="keyword">final</span> String base = context.getResources().<span class="keyword">getText</span>(
          com.android.internal.R.string.web_user_agent).toString();
  <span class="keyword">return</span> String.format(base, buffer, mobile);
  }
</code></pre></li>
</ul>
<h2 id="参考文章">参考文章</h2>
<p><a href="http://hw3com.iteye.com/blog/1152915" target="_blank" rel="external">Android中浏览器UA的生成策略</a></p>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/03/17/UA-Info/" target="_blank" rel="external">http://chenggoi.com/2015/03/17/UA-Info/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[获取Android 4.2的UA信息]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小米2s个人刷机记录]]></title>
    <link href="http://chenggoi.com/2015/03/03/XiaoMi_2s_Rom/"/>
    <id>http://chenggoi.com/2015/03/03/XiaoMi_2s_Rom/</id>
    <published>2015-03-03T01:30:52.000Z</published>
    <updated>2015-03-17T10:40:53.000Z</updated>
    <content type="html"><![CDATA[<p><strong>注：</strong>跳屏这件事也许与屏幕质量有关，但是我的确刷到过不跳的Rom</p>
<h3 id="IUNI_OS_小米_2/2S_V3-0-02">IUNI OS 小米 2/2S V3.0.02</h3>
<ul>
<li>描述：一加手机适配rom，简约为主</li>
<li>耗电：看1080p视频45分钟,3G网路打开，剩余电量77%</li>
<li>发热：基本不发热，充电时轻微发热</li>
<li>跳屏：偶尔会跳屏一次</li>
<li>流畅：由于主打精简的设计，所以流畅度很好，不过功能上就精简了很多</li>
</ul>
<h3 id="cm12-plus-5-0-Beta5-0-aries">cm12-plus-5.0-Beta5.0-aries</h3>
<ul>
<li>描述：安卓梦工厂适配Rom，基于Android 5.0.2</li>
<li>耗电：看1080p视频45分钟，3G网络打开,剩余电量67%</li>
<li>发热：看视频和充电时有中度温度提升</li>
<li>跳屏：使用中（非充电状态）跳屏一次</li>
<li>流畅：流畅度一般，尤其在使用钛备份恢复完成后以及使用中突然出现严重卡顿</li>
</ul>
<h3 id="MK44-4-aries-150131-HISTORY">MK44.4-aries-150131-HISTORY</h3>
<ul>
<li>描述：魔趣论坛Rom，历史版（长期支持版本）</li>
<li>耗电：看1080p视频45分钟，3G网络打开，省电模式打开（未限制CPU），剩余电量56%</li>
<li>发热：看视频和充电时有很明显的温度提升</li>
<li>跳屏：使用中（非充电状态）偶尔会跳屏数次</li>
<li>流畅：非常流畅（开启限制CPU的省电模式会出现卡顿）</li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/03/03/XiaoMi_2s_Rom/" target="_blank" rel="external">http://chenggoi.com/2015/03/03/XiaoMi_2s_Rom/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[记录网络上大量小米2s的Rom在本人手机的使用情况]]>
    
    </summary>
    
      <category term="刷机" scheme="http://chenggoi.com/tags/%E5%88%B7%E6%9C%BA/"/>
    
      <category term="随笔" scheme="http://chenggoi.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ADT个人设置备份]]></title>
    <link href="http://chenggoi.com/2015/02/28/ADT/"/>
    <id>http://chenggoi.com/2015/02/28/ADT/</id>
    <published>2015-02-28T11:54:22.000Z</published>
    <updated>2015-02-28T12:13:44.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>自动补全：<ul>
<li>java：<code>._abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code><br><img src="http://7tsyx2.com1.z0.glb.clouddn.com/java_assist.jpg" alt="java"></li>
<li>xml:<code>&lt;=:_abcdefghijklmnopqrstuvwxyz</code><br><img src="http://7tsyx2.com1.z0.glb.clouddn.com/xml_assist.jpg" alt="xml"></li>
</ul>
</li>
<li>去除自动补全<code>integer</code><br><img src="http://7tsyx2.com1.z0.glb.clouddn.com/remove_integer.jpg" alt="integer"></li>
<li>增加内存大小<blockquote>
<p>在<code>eclipse.ini</code>中修改：<br>-XX:MaxPermSize=512m<br>-Xms1024m<br>-Xmx4096m<br>-Declipse.buildId=v22.3.0-887826<br>-XX:MaxPermSize=2048m</p>
</blockquote>
</li>
<li>防止闪退：<blockquote>
<p>在<code>eclipse.ini</code>中添加：<br>-Dorg.eclipse.swt.browser.DefaultType=mozilla</p>
</blockquote>
</li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/02/28/ADT/" target="_blank" rel="external">http://chenggoi.com/2015/02/28/ADT/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[ADT个人设置备份]]>
    
    </summary>
    
      <category term="备份" scheme="http://chenggoi.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
      <category term="随笔" scheme="http://chenggoi.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[由修改Android 4.4音乐播放器源码引发的对于LaunchMode的总结]]></title>
    <link href="http://chenggoi.com/2015/01/28/AndroidLaunchMode/"/>
    <id>http://chenggoi.com/2015/01/28/AndroidLaunchMode/</id>
    <published>2015-01-28T12:07:43.000Z</published>
    <updated>2015-01-30T05:23:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Ubuntu <span class="number">14.04</span> <span class="number">64</span>位
gcc版本：<span class="number">4.4</span>
jdk版本：<span class="number">1.6</span> <span class="number">71u</span>
Android版本：<span class="number">4.4</span><span class="number">.2</span>
</code></pre><hr>
<h2 id="引言">引言</h2>
<p>该问题的复现方法比较复杂，需要使用原生的Android 4.4.2系统及未修改过的音乐播放器：</p>
<blockquote>
<ol>
<li>打开一个软件然后点击HOME放入后台</li>
<li>打开“音乐”，点击任意一首歌进入播放界面</li>
<li>按下选项键选择音乐库，此时按返回键</li>
<li>软件没有回到上一个Activity，也没有退出，而是跳转到了之前放入后台的Activity</li>
</ol>
</blockquote>
<h2 id="解决方案">解决方案</h2>
<p>首先先放出解决方案，不过由于本人对操作系统并没有深入的研究过，该方案是否有后遗症目前还未可知，等待测试的同学汇报结果吧。</p>
<p><strong>文件目录：</strong></p>
<blockquote>
<p>workspace/packages/apps/Music</p>
</blockquote>
<h3 id="方法一：">方法一：</h3>
<ul>
<li>效果比较完美，但是涉及启动模式的改动，文末会有该部分粗略的解析，权当抛砖引玉</li>
<li>打开<code>src/com/android/music/MediaPlaybackActivity.java</code> 文件，注释掉<code>public boolean onOptionsItemSelected(MenuItem item)</code>函数中的：<pre><code>  <span class="comment">//intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);//设定从播放假面跳转到音乐库界面的启动模式</span>
</code></pre></li>
<li>打开<code>src/com/android/music/MusicUtils.java</code>文件，注释掉<code>static void activateTab(Activity a, int id)</code>函数中的：<pre><code>  <span class="comment">//intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//从音乐库跳转到四个Tab页面的启动模式</span>
</code></pre></li>
<li>最后打开<code>AndroidManifest.xml</code>配置文件，进行如下修改<ul>
<li>删除<code>com.android.music.MediaPlaybackActivity</code>中的<code>android:launchMode=&quot;singleTask&quot;</code></li>
<li>为<pre><code><span class="string">"com.android.music.ArtistAlbumBrowserActivity"</span>、
<span class="string">"com.android.music.AlbumBrowserActivity"</span>、
<span class="string">"com.android.music.TrackBrowserActivity"</span>、
<span class="string">"com.android.music.PlaylistBrowserActivity"</span>
</code></pre>四个<code>Activity</code>添加<code>android:launchMode=&quot;singleTask&quot;</code>，如（其余三个也加在相似位置）：<pre><code>&lt;activity android:<span class="variable">name=</span><span class="string">"com.android.music.ArtistAlbumBrowserActivity"</span> android:<span class="variable">exported=</span><span class="string">"false"</span> android:<span class="variable">launchMode=</span><span class="string">"singleTask"</span>&gt;
</code></pre></li>
</ul>
</li>
<li>修改完保存然后<code>make</code>一下即可，再按返回键就回回到进入软件之前的界面</li>
</ul>
<h3 id="方法二：">方法二：</h3>
<ul>
<li>该方法通过重写<code>Activity</code>的<code>onKeyDown</code>方法，监听用户按下返回键的动作，从而跳转到一个指定的<code>Activity</code>，比较保险，只是灵活性不足。以下代码实现的效果与按下<code>HOME</code>效果相同</li>
<li>打开<code>ArtistAlbumBrowserActivity.java</code>，添加如下代码(其余三个Activity同理)：<pre><code>  <span class="annotation">@Override</span>
  <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span>(<span class="keyword">int</span> keyCode, KeyEvent event) {
      <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) {
          Intent HomeIntent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);
          HomeIntent.addCategory(Intent.CATEGORY_HOME);
          startActivity(HomeIntent);<span class="comment">//通过Intent跳转到桌面Activity</span>
          finish();
      } <span class="keyword">else</span> {
          <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);
      }
  }
</code></pre></li>
</ul>
<h2 id="原理简述">原理简述</h2>
<h3 id="ActivityStack">ActivityStack</h3>
<ul>
<li>Android采用栈存储结构来管理打开的<code>Activity</code>，将每个失去焦点又没有<code>finish()</code>的Activity依次存入栈空间中，待用户按返回键时就将栈顶的<code>Activity</code>弹出，重新赋予焦点，以显示在最上层界面。</li>
<li>在这里要先介绍几条<code>adb</code>指令：<pre><code>  查询ActivityStack的详细情况：
  <span class="variable">$adb</span> shell dumpsys activity activities
  查询当前在栈中的Activity：
  <span class="variable">$adb</span> shell dumpsys activity activities | sed -En <span class="operator">-e</span> <span class="string">'/Running activities/,/Run #0/p'</span>
</code></pre></li>
<li>我们用第二条指令来查看一下<code>Android 4.2</code>和<code>Android 4.4</code>的Activity栈空间</li>
<li><code>Android 4.2</code>采用单栈结构，每一个<code>Activity</code>获得焦点的时候就会存入栈顶，因此当按返回键的时候会依次弹出栈顶<code>Activity</code>，不会出现问题，如下图：<br>  <img src="http://7tsyx2.com1.z0.glb.clouddn.com/android4.2activitystack.jpg" alt="Android4.2"><br>  从图中我们可以看到仅有一个<code>Running activities</code>就是所谓的<code>Activity栈</code>，而下面分为了很多<code>TaskRecord</code>，是根据每个<code>Activity</code>的<code>LaunchMode</code>决定的，后面会进行介绍。在每个<code>Run</code>后面的就是当前存在栈中的<code>Activity</code>，大家可以看到，位于栈顶的是<code>systemui</code>，也就是我正连接电脑所弹出的下拉通知界面，这时我按下返回键就会返回到<code>Run #2</code>，也就是<code>launcher</code>，返回桌面了。当你返回到桌面以后再按返回键也不会返回到上一个<code>Activity</code>中了，因为桌面的返回键监听和别的<code>Activity</code>不同，剩下的<code>Activity</code>只有当你再次打开该软件时会优先弹出该界面。</li>
<li><p><code>Android 4.4</code>并没有沿用之前的规则，我们先来看图：<br>  <img src="http://7tsyx2.com1.z0.glb.clouddn.com/android4.4activitystack.jpg" alt="Android 4.4"><br>  细心的人可能发现了，图中有两个<code>Running activities</code>，没错，<code>Android 4.4</code>采用的是双栈的管理结构，一个栈负责存储<code>Launcher</code>和<code>systemui</code>，在<code>ActivityStackSupervisor.java</code>中用<code>mHomeStack</code>表示，另一个栈负责存储其他应用的<code>Activity</code>，用<code>mFocusedStack</code>表示，当用户按下返回键的时候，<code>ActivityManager</code>会调用</p>
<blockquote>
<p>frameworks/base/services/java/com/android/server/am/ActivityStackSupervisor.java</p>
</blockquote>
<p>  中的<code>getLastStack()</code>方法来判断上一个<code>Activity</code>存在于哪个栈空间中。虽然我不知道谷歌这样设计的用意如何，但是问题也就随之而来了。通过对于<code>logcat</code>的抓取，我发现当我们从<code>Launcher</code>打开一个软件的时候，获取到的上一个栈空间是<code>STACK_STATE_HOME_TO_BACK</code>，而当我们在软件中的<code>Activity</code>间相互切换时，获取到的上一个栈空间是<code>STACK_STATE_HOME_IN_BACK</code>，简单地说就是标记为是在软件内部的<code>Activity</code>之间相互跳转，只有当用户返回到最开始的入口<code>Activity</code>时按返回键才会返回桌面，这在很多软件如<code>文件管理</code>等是很常见的。而<code>音乐</code>这个软件有一点不同，那就是当你在<code>播放界面</code>点击<code>音乐库</code>的时候所跳转的<code>音乐库</code>界面正是该软件的入口<code>Activity</code>，所以将该<code>Activity</code>的上一个栈空间重置为<code>STACK_STATE_HOME_IN_BACK</code>，同时由于调用了<code>intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</code>方法，将其余的<code>Activity</code>都从栈空间中弹出销毁，导致了<code>音乐库</code>界面的上一级变成了其他软件存在栈空间中的<code>Activity</code>，所以当返回的时候自然也就跳转到其他界面了。以下是图示：<br>  <strong>播放界面的栈空间：</strong><br>  <img src="http://7tsyx2.com1.z0.glb.clouddn.com/music0.jpg" alt="music0"><br>  <strong>点击音乐库之后的栈空间：</strong><br>  <img src="http://7tsyx2.com1.z0.glb.clouddn.com/music1.jpg" alt="music1"></p>
<p>  由图可见我们当前音乐库的上一个<code>Activity</code>是<code>dialer</code>，即拨号界面，所以当我们按下返回键之后就会跳转到拨号界面，如果你的栈空间中还存在着很多其他界面，则继续按下返回键会一一弹出。</p>
</li>
</ul>
<h3 id="LaunchMode">LaunchMode</h3>
<p>　　<code>LaunchMode</code>的设定在<code>AndroidManifest.xml</code>文件中，为目标<code>Activity</code>添加<code>android:launchMode</code>即可。<code>Activity</code>共有四种启动模式，分为<code>standard</code>（默认）、<code>singleTop</code>、<code>singleTask</code>以及<code>singleInstance</code>，以下我会分条列明，在这里我们不考虑人为<code>finish()</code>的情况。</p>
<h4 id="1-standard">1.standard</h4>
<p><code>standard</code>是<code>Activity</code>的默认启动方法，如果没有单独设定，则会使用该方法启动<code>Activity</code>。每次通过<code>Intent</code>启动一个<code>Activity</code>时都会将该<code>Activity</code>压入栈中，无论 是否已经存在该<code>Activity</code>，即当前栈中的情况为<code>A B C</code>当我们通过<code>C</code>调用<code>Intent</code>依然启动<code>C</code>的时候，栈中情况变为<code>A B C C</code>，若是通过<code>C</code>调用<code>Intent</code>启动<code>D</code>，则栈中情况变为<code>A B C C D</code>，以此类推，而当我们按下返回键时，则会按照<code>C C B A</code>的顺序弹出。</p>
<h4 id="2-singleTop">2.singleTop</h4>
<p>设定启动模式为<code>singleTop</code>的<code>Activity</code>位于栈顶时，通过<code>Intent</code>依然跳转到该<code>Activity</code>时，则不会新建一个实例来存储该<code>Activity</code>。例如目前栈中情况为<code>A B C</code>，<code>A B C</code>的启动模式均为<code>singleTop</code>，当我们通过<code>C</code>调用<code>Intent</code>依然启动<code>C</code>时，栈中的情况仍是<code>A B C</code>，不会新创建一个<code>C</code>的实例压入栈中。但是当我们通过<code>C</code>调用<code>Intent</code>启动<code>B</code>的时候，则会新建一个<code>B</code>的实例压入栈中，栈中的情况变为<code>A B C B</code>。</p>
<h4 id="3-singleTask">3.singleTask</h4>
<p>设定启动模式为<code>singleTask</code>的<code>Activity</code>在<code>Task</code>栈中只会有一个实例存在，即当前<code>TaskRecord</code>中情况为<code>A B C</code>，其中<code>B</code>的启动模式为<code>singleTask</code>，当我们通过<code>C</code>调用<code>Intent</code>启动<code>B</code>时，栈中情况变为<code>A B</code>，即<code>B</code>继续使用之前存于栈中的实例，而<code>B</code>之后的实例均被弹出销毁。如果当前<code>TaskRecord</code>中没有该实例，则会新建一个<code>TaskRecord</code>，并将该实例压入栈中。本文的解决方法便是用的该模式，讲<code>A</code>设为<code>singleTask</code>模式，使得从软件中任何<code>Activity</code>跳转到<code>A</code>时都是使用的<code>A</code>已经存在于栈中的实例，从而能够正确的识别出<code>A</code>的上层<code>Activity栈</code>。</p>
<h4 id="4-singleInstance">4.singleInstance</h4>
<p>设定启动模式为<code>singleInstance</code>的<code>Activity</code>会在<code>Activity栈</code>中新建一个<code>TaskRecord</code>，即当前<code>TaskRecord 1</code>中的情况为<code>A B C</code>，通过<code>C</code>调用<code>Intent</code>启动<code>D</code>，如果<code>D</code>设定为<code>singleInstance</code>，则会新建一个<code>TaskRecord 2</code>并将<code>D</code>压入该栈中，而<code>TaskRecord 1</code>的情况依然为<code>A B C</code>。当通过<code>D</code>调用<code>Intent</code>仍然启动<code>D</code>时，<code>TaskRecord 2</code>中不会新建一个<code>D</code>的实例，也不会新建一个<code>TaskRecord</code>，所以状态没有任何改变。但是当从<code>D</code>跳转到<code>C</code>时，<code>TaskRecord 1</code>中会变为<code>A B C C</code>，而此时按下返回键也不会回到<code>D</code>中，而是按照<code>C B A</code>的顺序弹出。</p>
<h3 id="Activity_Intent_Flag">Activity Intent Flag</h3>
<p><code>Intent Flag</code>是在初始化<code>Intent</code>通过<code>intent.addFlags（flag）</code>来指定通过<code>Intent</code>启动的<code>Activity</code>的启动模式，下面是几种常用的<code>flag</code>：</p>
<h4 id="1-Intent-FLAG_ACTIVITY_NEW_TASK">1.Intent.FLAG_ACTIVITY_NEW_TASK</h4>
<p>判断在<code>AndroidManifest.xml</code>中为<code>Activity</code>添加的<code>Affinity</code>值，如果和当前的<code>TaskRecord</code>中的值不一样的话，则会在一个新的<code>TaskRecord</code>中标记该<code>Affinity</code>值并将新的<code>Activity</code>压入其中。如果并没有设定<code>Affinity</code>或者与<code>TaskRecord</code>中的值相同，则采取标准的启动模式。</p>
<h4 id="2-Intent-FLAG_ACTIVITY_SINGLE_TOP">2.Intent.FLAG_ACTIVITY_SINGLE_TOP</h4>
<p>该模式与在<code>LaunchMode</code>中设定<code>singleTop</code>相类似，如果正要启动的<code>Activity</code>在栈中位于栈顶，则不会新建一个实例压入栈中。</p>
<h4 id="3-Intent-FLAG_ACTIVITY_CLEAR_TOP">3.Intent.FLAG_ACTIVITY_CLEAR_TOP</h4>
<p>该模式与在<code>LaunchMode</code>中设定<code>singleTask</code>相类似，如果正要启动的<code>Activity</code>位于栈中，则不会新建实例压入栈中，并且会弹出并销毁栈中该<code>Activity</code>之上的<code>Activity</code>。</p>
<h4 id="4-Intent-FLAG_ACTIVITY_NO_HISTORY">4.Intent.FLAG_ACTIVITY_NO_HISTORY</h4>
<p>该模式不会将<code>Activity</code>压入栈中，从该<code>Activity</code>跳转到其他界面之后无法再返回到该<code>Activity</code>。</p>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="http://blog.csdn.net/zhangjg_blog/article/details/10923643" target="_blank" rel="external">Android中Activity四种启动模式和taskAffinity属性详解</a></li>
<li><a href="http://www.cnphp6.com/archives/58911" target="_blank" rel="external">ACTIVITY的启动模式与FLAG详解</a></li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/28/AndroidLaunchMode/" target="_blank" rel="external">http://chenggoi.com/2015/01/28/AndroidLaunchMode/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[修复音乐播放器按返回键跳转到其他应用，以及粗略记录下Activity栈及LaunchMode知识]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="LaunchMode" scheme="http://chenggoi.com/tags/LaunchMode/"/>
    
      <category term="ActivityStack" scheme="http://chenggoi.com/tags/ActivityStack/"/>
    
      <category term="Music" scheme="http://chenggoi.com/tags/Music/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio突破障碍配置]]></title>
    <link href="http://chenggoi.com/2015/01/21/AndroidStudio/"/>
    <id>http://chenggoi.com/2015/01/21/AndroidStudio/</id>
    <published>2015-01-21T11:53:05.000Z</published>
    <updated>2015-01-30T05:55:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用VPN">使用VPN</h2>
<p>如果手里有VPN实在是再好不过了，只需要在主界面选择setting-&gt;HttpProxy-&gt;Manual proxy Configuration设置即可</p>
<p><img src="http://7tsyx2.com1.z0.glb.clouddn.com/androidStudio.jpg" alt="示例"></p>
<p>然后在更新SDK的界面也配置好代理即可：<br><a href="http://chenggoi.com/2015/01/01/SDK_Manager/" target="_blank" rel="external">SDK Manager更新速度慢</a></p>
<p>这样一来更新就不会有问题了</p>
<h2 id="不使用VPN">不使用VPN</h2>
<p>毕竟VPN也算是小有成本的东西了，不过长年混迹于Android开发的手头最好还是要有几种FQ手段相辅相成的好哇。接下来说说不使用VPN的方法，可能会不定期的失效，听天由命吧～</p>
<h3 id="配置Gradle">配置Gradle</h3>
<p>打开</p>
<pre><code>android-studio<span class="regexp">/plugins/</span>android<span class="regexp">/lib/</span>templates<span class="regexp">/gradle/</span>wrapper<span class="regexp">/gradle/</span>wrapper<span class="regexp">/gradle-wrapper.properties</span>
</code></pre><p>文件，修改<code>Gradle</code> 的下载路径：</p>
<pre><code>distributionUrl=https\<span class="symbol">://services</span>.gradle.org/distributions/gradle-<span class="number">2.2</span>.<span class="number">1</span>-all.zip
</code></pre><p>修改为可以使用的地址即可，比如转存到云里或者下载到本地都可以。</p>
<p>其中，<code>Gradle</code>的下载地址为：</p>
<pre><code><span class="label">http:</span>//services.gradle<span class="preprocessor">.org</span>/distributions
</code></pre><h3 id="使用已有的SDK">使用已有的SDK</h3>
<p>如果你之前是<code>Eclipse</code>用户并且还保留着之前下好的<code>SDK</code>，那么就可以通过修改环境变量的方法，让<code>Android Studio</code>使用之前的<code>SDK</code>:</p>
<ul>
<li>使用编辑器打开<code>/etc/environment</code></li>
<li>添加<code>ANDROID_SDK_HOME=&quot;SDK文件夹所在路径&quot;</code></li>
<li>添加<code>GRADLE_HOME=&quot;GRADLE文件夹所在路径&quot;</code></li>
<li>在<code>PATH</code>中添加<code>&quot;%ANDROID_SDK_HOME%\bin;%GRADLE_HOME%\bin;%ANDROID_SDK_HOME%\platform-tools;&quot;</code></li>
<li>重新打开<code>Android Studio</code>并关闭所有<code>Project</code>，在主界面选择<code>configure-&gt;project defaults-&gt;project structure</code>配置SDK版本即可</li>
</ul>
<h3 id="自动更新">自动更新</h3>
<p>这个方法貌似要配合GoAgent等类似工具使用</p>
<p>打开<code>Android Studio</code>目录下的<code>/bin/studio.vmoptions</code>文件（64位是<code>studio64.vmoptions</code>文件），在末尾添加如下语句：</p>
<pre><code>-<span class="ruby"><span class="constant">Djava</span>.net.preferIPv4Stack=<span class="keyword">true</span>
</span>-<span class="ruby"><span class="constant">Didea</span>.updates.url=<span class="symbol">http:</span>/<span class="regexp">/dl.google.com/android</span><span class="regexp">/studio/patches</span><span class="regexp">/updates.xml
</span></span>-<span class="ruby"><span class="constant">Didea</span>.patches.url=<span class="symbol">http:</span>/<span class="regexp">/dl.google.com/android</span><span class="regexp">/studio/patches</span><span class="regexp">/</span></span>
</code></pre><h3 id="启动中遇到Fetching_Android_SDK_component_information">启动中遇到<strong>Fetching Android SDK component information</strong></h3>
<ul>
<li>打开<code>bin/idea.properties</code>文件</li>
<li>在末尾添加<code>disable.android.first.run=true</code>保存即可</li>
</ul>
<h2 id="参考链接">参考链接</h2>
<p><a href="http://my.oschina.net/xesam/blog/213953" target="_blank" rel="external">【Android】Android Studio启动配置gradle</a><br><a href="http://my.oschina.net/pblack/blog/167847" target="_blank" rel="external">ANDROID STUDIO 自动更新失败之解决办法</a><br><a href="http://blog.csdn.net/vichild/article/details/8952092" target="_blank" rel="external"> 修改android studio中的avd sdk路径</a></p>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/21/AndroidStudio/" target="_blank" rel="external">http://chenggoi.com/2015/01/21/AndroidStudio/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[解决由于种种原因导致的Android无法正常运行，更新，安装插件等问题]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为EditText输入框添加自动弹出输入法框]]></title>
    <link href="http://chenggoi.com/2015/01/16/EditTextShowKeyboard/"/>
    <id>http://chenggoi.com/2015/01/16/EditTextShowKeyboard/</id>
    <published>2015-01-16T12:56:16.000Z</published>
    <updated>2015-01-30T05:57:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Ubuntu <span class="number">14.04</span>
Android：<span class="number">4.4</span><span class="number">.2</span>
java：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><h2 id="引言">引言</h2>
<p>对于<code>Android</code>系统来说，理论上如果一个<code>Activity</code>页面含有一个或多个<code>EditText</code>，则在用户切换到该<code>Activity</code>时会自动聚焦在第一个<code>EditText</code> 上，并弹出输入法框。但是实际情况却是在有的时候无法自动弹出，这时候我们就可以帮他们一把了。本人是在<code>Android</code> 源码中进行的修改，如果是要自己建<code>Activity</code>原理也是相同的。</p>
<h2 id="自动显示">自动显示</h2>
<p><strong>添加如下函数并在待显示的view声明之后调用</strong>，通过调用<code>Handle</code> 线程来避免在主线程更新UI：</p>
<pre><code>    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showKeyboardPassword</span> (<span class="keyword">final</span> TextView v) {
    v.setFocusable(<span class="keyword">true</span>); 
    v.requestFocus(); 
    (<span class="keyword">new</span> Handler()).postDelayed(<span class="keyword">new</span> Runnable() { 
        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() { 
            InputMethodManager imm = (InputMethodManager) 
            mPasswordView.getContext().getSystemService(Context.INPUT_METHOD_SERVICE); 
            <span class="keyword">if</span>(v.isFocused()) 
            { 
            imm.toggleSoftInput(<span class="number">0</span>, InputMethodManager.HIDE_NOT_ALWAYS); 
            } 
            <span class="keyword">else</span> 
            { 
            imm.hideSoftInputFromWindow(v.getWindowToken(),<span class="number">0</span>); 
            }
            } 
        }, <span class="number">100</span>); 
}
</code></pre><h2 id="自动隐藏">自动隐藏</h2>
<p>由于自动弹出键盘有时也是挺烦人的，特从网上搜集了一些强制隐藏的方法</p>
<p><strong>方法一：</strong>在<code>AndroidMainfest.xml</code>中找到想要隐藏弹出键盘的<code>Activity</code>，添加如下语句</p>
<pre><code>android:<span class="variable">windowSoftInputMode=</span><span class="string">"adjustUnspecified|stateHidden"</span> 
</code></pre><p><strong>方法二:</strong>对EditText使用clearFocus方法清除焦点</p>
<pre><code>EditText <span class="keyword">edit</span>=(EditText)findViewById(R.id.<span class="keyword">edit</span>);
<span class="keyword">edit</span>.clearFocus();
</code></pre><p>  <strong>方法三：</strong>强制隐藏输入法</p>
<pre><code>EditText <span class="keyword">edit</span>=(EditText)findViewById(R.id.<span class="keyword">edit</span>);  
InputMethodManager imm =(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); 
imm.hideSoftInputFromWindow(<span class="keyword">edit</span>.getWindowToken(),<span class="number">0</span>);
</code></pre><h2 id="相关资料">相关资料</h2>
<ul>
<li><a href="http://www.360doc.com/content/14/0722/10/11800748_396211794.shtml" target="_blank" rel="external">Android通过事件触发EditText焦点和自动弹出键盘</a></li>
<li><a href="http://kfc-davy.iteye.com/blog/1098403" target="_blank" rel="external">android edittext不弹出软键盘</a></li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/16/EditTextShowKeyboard/" target="_blank" rel="external">http://chenggoi.com/2015/01/16/EditTextShowKeyboard/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[切换到某个含有EditText的Activity页面以后自动聚焦并弹出输入法框]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="EditText" scheme="http://chenggoi.com/tags/EditText/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 4.2.2 添加暗码]]></title>
    <link href="http://chenggoi.com/2015/01/15/AddSecretCode/"/>
    <id>http://chenggoi.com/2015/01/15/AddSecretCode/</id>
    <published>2015-01-15T12:35:05.000Z</published>
    <updated>2015-02-28T12:15:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Unubtu <span class="number">14.04</span>
Android：<span class="number">4.2</span><span class="number">.2</span>
gcc：<span class="number">4.4</span>
java：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><h2 id="引言">引言</h2>
<p>在手机的拨号界面输入 <code>*#06#</code> 会出现手机的串号，这个功能想必大家都知道，这就是所谓的<code>暗码</code>。这种暗码是可以自己添加定义的，以下我会写出添加的方法，至于原理网上有很多，大家可以自行查找。</p>
<h2 id="创建Activity">创建Activity</h2>
<p>首先要创建一个想要显示<code>Activity</code>，<code>Activity</code>可以创建在<code>workspace/packages/apps/Contacts/src/com/android/contacts/</code>目录下。这里我就不多赘述了，网上教程一大把。要注意的是，暗码实际上是通过<code>Intent</code>来启动<code>Activity</code>。我在这里就以<code>WiFiTestActivity.java</code>为例子为大家讲解。</p>
<h2 id="设置配置文件">设置配置文件</h2>
<p>打开<code>workspace/packages/apps/Contacts/</code>目录下的<code>AndroidManifest.xml</code>配置文件，添加如下代码注册刚建好的<code>Activity</code>并配置<code>Intent</code>，其中与<code>name</code>是你的<code>Activity</code>文件名，注意前面有个点，<code>label</code>是你自己定义的字符串，<code>OPEN_WiFiTestActivity</code>修改为<code>OPEN_你自己的Activity</code></p>
<pre><code><span class="tag">&lt;<span class="title">activity
</span> <span class="attribute">android:name</span>=<span class="value">".WiFiTestActivity"</span>
 <span class="attribute">android:label</span>=<span class="value">"@string/wifi_test"</span>
 <span class="attribute">android:screenOrientation</span>=<span class="value">"portrait"</span> &gt;</span>
 <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span>
   <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.OPEN_WiFiTestActivity"</span> /&gt;</span>
   <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span>
 <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span>
<span class="tag">&lt;/<span class="title">activity</span>&gt;</span>
</code></pre><h2 id="添加调用代码">添加调用代码</h2>
<p>打开</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workspace<span class="regexp">/packages/</span>apps<span class="regexp">/Contacts/</span>src<span class="regexp">/com/</span>android<span class="regexp">/contacts/</span>src<span class="regexp">/com/</span>android<span class="regexp">/contacts/</span>SpecialCharSequenceMgr.java</div></pre></td></tr></table></figure>

<p>文件，找到<code>handleSecretCode</code>方法的定义，并在其中添加如下代码，其中<code>OPEN_WiFiTestActivity</code>替换为之前注册的，<code>*#1111#</code>替换为你自己的暗码</p>
<pre><code><span class="keyword">else</span> <span class="keyword">if</span> (input<span class="built_in">.</span><span class="keyword">equals</span>(<span class="string">"*#1111#"</span>)) {
    Intent i <span class="subst">=</span> <span class="literal">new</span> Intent(<span class="string">"android.intent.action.OPEN_WiFiTestActivity"</span>);
    context<span class="built_in">.</span>startActivity(i);
    <span class="keyword">return</span> <span class="literal">true</span>;
}
</code></pre><p>之后就可以<code>make -j4</code>一下刷到手机或者虚拟机里看看效果了～</p>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/15/AddSecretCode/" target="_blank" rel="external">http://chenggoi.com/2015/01/15/AddSecretCode/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[基于Android系统源码，为Android添加如“*#06#”一样的暗码]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="暗码" scheme="http://chenggoi.com/tags/%E6%9A%97%E7%A0%81/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android系统源码之桌面和锁屏时钟添加Am/Pm显示]]></title>
    <link href="http://chenggoi.com/2015/01/13/Add_ampm_Android/"/>
    <id>http://chenggoi.com/2015/01/13/Add_ampm_Android/</id>
    <published>2015-01-13T13:00:00.000Z</published>
    <updated>2015-01-30T06:00:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Ubuntu <span class="number">14.04</span> <span class="number">64</span>位
gcc版本：<span class="number">4.4</span>
jdk版本：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><hr>
<h2 id="引言">引言</h2>
<p> 　　Google官方原生的Android系统在桌面的时间控件和锁屏界面的时间控件上都默认不显示 <code>am</code> 和 <code>pm</code> 标识的，虽然我觉得的确在大多数情况下人们是可以不通过标识对时间作出正确判断的，而且由于<code>local</code> 的不同，去掉 <code>ampm</code> 可以让时间显示固定在一个相对固定的长度，方便布局。不过各有所好，所以在这里总结下此次修改的过程。不要问我为什么要分成 <code>Android 4.2.2</code> 和 <code>Android 4.4.2</code> ，我也不敢想象Google对于两个系统四个时钟用了几乎完全不同的方式，不过最核心的还是 <code>TextClock</code> 布局的使用，以及如 <code>hmma</code> 这样的时间格式化的方法，对这块有兴趣的可以去研究下官方文档。</p>
<h2 id="Android_4-2-2">Android 4.2.2</h2>
<h3 id="锁屏时钟">锁屏时钟</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">需要修改的文件：</div><div class="line">workspace/frameworks/base/目录下</div><div class="line">    policy/src/<span class="keyword">com</span>/android/internal/policy/impl/keyguard/ClockView.java</div><div class="line">    core/<span class="keyword">res</span>/<span class="keyword">res</span>/layout/keyguard_status_view.xml</div><div class="line">    core/<span class="keyword">res</span>/<span class="keyword">res</span>/<span class="built_in">values</span>/public.xml</div><div class="line">    core/<span class="keyword">res</span>/<span class="keyword">res</span>/<span class="built_in">values</span>/ids.xml</div><div class="line">    api/current.txt</div></pre></td></tr></table></figure>

<ul>
<li>首先在 <code>ClockView.java</code> 中有如下代码：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">AmPm(View parent, Typeface tf) {</div><div class="line">    // No longer used, uncomment <span class="keyword">if</span> we decide to use AM/PM indicator again</div><div class="line">    // <span class="variable">mAmPmTextView =</span> (TextView) parent.findViewById(R.id.am_pm);</div><div class="line">    <span class="keyword">if</span> (mAmPmTextView != <span class="constant">null</span> && tf != <span class="constant">null</span>) {</div><div class="line">        mAmPmTextView.setTypeface(tf);</div><div class="line">    }</div><div class="line"></div><div class="line">    String[] <span class="variable">ampm =</span> new DateFormatSymbols().getAmPmStrings();</div><div class="line">    <span class="variable">mAmString =</span> ampm[<span class="number">0</span>];</div><div class="line">    <span class="variable">mPmString =</span> ampm[<span class="number">1</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>我们可以看到Google将显示ampm的控件注释掉了，而且在布局文件中也没有该Textiew，所以接下来我们先取消注释：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">AmPm(View parent, Typeface tf) {</div><div class="line">    // No longer used, uncomment <span class="keyword">if</span> we decide to use AM/PM indicator again</div><div class="line">    <span class="variable">mAmPmTextView =</span> (TextView) parent.findViewById(R.id.am_pm);</div><div class="line">    <span class="keyword">if</span> (mAmPmTextView != <span class="constant">null</span> && tf != <span class="constant">null</span>) {</div><div class="line">        mAmPmTextView.setTypeface(tf);</div><div class="line">    }</div><div class="line"></div><div class="line">    String[] <span class="variable">ampm =</span> new DateFormatSymbols().getAmPmStrings();</div><div class="line">    <span class="variable">mAmString =</span> ampm[<span class="number">0</span>];</div><div class="line">    <span class="variable">mPmString =</span> ampm[<span class="number">1</span>];</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>然后在 <code>keyguard_status_view.xml</code> 下添加相应的布局文件：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	&lt;TextView</div><div class="line">	    android:id=<span class="string">"@+id/clock_text"</span></div><div class="line">	    <span class="keyword">...</span>/&gt;</div><div class="line">	    </div><div class="line">	&lt;TextView</div><div class="line">	    android:id=<span class="string">"@+id/am_pm"</span></div><div class="line">	    android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">	    android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">	    android:layout_toRightOf=<span class="string">"@id/clock_text"</span></div><div class="line">	    android:drawablePadding=<span class="string">"2dip"</span></div><div class="line">	    android:ellipsize=<span class="string">"none"</span></div><div class="line">	    android:singleLine=<span class="string">"true"</span></div><div class="line">	    android:textAppearance=<span class="string">"?android:attr/textAppearanceMedium"</span></div><div class="line">	    android:textColor=<span class="string">"#ffffffff"</span></div><div class="line">	    android:textSize=<span class="string">"20dp"</span> /&gt;</div><div class="line">	</div><div class="line">		<span class="keyword">...</span></div><div class="line">&lt;/com.android.internal.policy.impl.keyguard.ClockView&gt;</div></pre></td></tr></table></figure>

<ul>
<li>由于Android系统源码在添加 <code>res</code> 资源时并不会自动的注册 <code>id</code> ，因此接下来我们要手动为刚添加的 <code>TextView</code> 分配id。首先打开 <code>ids.xml</code> 文件，添加如下一行：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  &lt;resources&gt;</div><div class="line"><span class="keyword">...</span></div><div class="line">  &lt;item type=<span class="string">"id"</span> name=<span class="string">"am_pm"</span> /&gt;</div><div class="line"><span class="keyword">...</span></div><div class="line">  &lt;/resources&gt;</div></pre></td></tr></table></figure>

<ul>
<li><p>然后打开 <code>public.xml</code> 文件，利用查找功能查找 <code>type=&quot;id&quot;</code> 并定位到最后一个 <code>type=&quot;id&quot;</code> 的public项，例如我这里是 <code>&lt;public type=&quot;id&quot; name=&quot;selectTextMode&quot; id=&quot;0x0102002d&quot; /&gt;</code> ，然后在他下面另起一行，添加 <code>&lt;public type=&quot;id&quot; name=&quot;am_pm&quot; id=&quot;0x0102002e&quot; /&gt;</code> ，注意 <code>id</code> 后面的 <code>0x0102002e</code> 是你刚才找到的那个最后一项的 <code>id+1</code> (16进制)，这样可以避免id冲突。</p>
</li>
<li><p>以上完成后我们要在 <code>frameworks/base/core/res/</code> 中执行 <code>mm</code>，编译后会更新 <code>com.android.internal.R</code> 文件，该 R文件 所对应的文件为 <code>/out/target/common/R/com/android/internal/R.java</code> ，可以在该文件中查看自己的资源是否已经加进去了。（如果mm出错可以尝试先执行一下 <code>touch 资源文件</code> 命令）</p>
</li>
<li><p>接下来后退到 <code>workspace</code> 目录下，执行 <code>make update-api</code> 指令，更新 <code>current.txt</code> 文件，然后执行 <code>make -j4</code> 对源码全编一遍，就可以看效果了</p>
</li>
</ul>
<h3 id="桌面时钟">桌面时钟</h3>
<pre><code>需要修改的文件：
workspace<span class="regexp">/packages/</span>apps<span class="regexp">/DeskClock/</span>目录下：
    res<span class="regexp">/layout/</span>digital_widget_time.xml
</code></pre><ul>
<li>桌面时钟的修改相对比较简单，只需要打开 <code>digital_widget_time.xml</code> 文件，将 <code>@+id/the_clock2</code> 的 <code>TextClock</code> 中的 <code>android:format12Hour=&quot;@string/widget_12_hours_format_no_ampm_m&quot;</code> 改为 <code>android:format12Hour=&quot;@string/widget_12_hours_format_m&quot;</code> 即可。</li>
</ul>
<h2 id="Android_4-4-2">Android 4.4.2</h2>
<h3 id="锁屏时钟-1">锁屏时钟</h3>
<pre><code>需要修改的文件：
workspace<span class="regexp">/frameworks/</span>base目录下
    packages<span class="regexp">/Keyguard/</span>res<span class="regexp">/values/</span>strings.xml
    packages<span class="regexp">/Keyguard/</span>src<span class="regexp">/com/</span>android<span class="regexp">/keyguard/</span>KeyguardStatusView.java
</code></pre><ul>
<li><p>首先调整 <code>strings.xml</code> 里的时间格式，将</p>
<pre><code>  &lt;string <span class="variable">name=</span><span class="string">"keyguard_widget_12_hours_format"</span> <span class="variable">translatable=</span><span class="string">"false"</span>&gt;h&amp;<span class="comment">#58;mm&lt;/string&gt;</span>
</code></pre></li>
<li><p>调整为</p>
<pre><code>  <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"keyguard_widget_12_hours_format"</span> <span class="attribute">translatable</span>=<span class="value">"false"</span>&gt;</span>h&amp;#58;mm&amp;#8202;<span class="tag">&lt;<span class="title">b</span>&gt;</span><span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">"16"</span> <span class="attribute">face</span>=<span class="value">"sans-serif-condensed"</span>&gt;</span>a<span class="tag">&lt;/<span class="title">font</span>&gt;</span><span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">string</span>&gt;</span>
</code></pre></li>
<li><p>然后在 <code>KeyguardStatusView.java</code> 文件中作如下修改</p>
<ul>
<li>添加缩小ampm字体大小的方法</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/***</span></div><div class="line">    * Add Code for show amPm in right size</div><div class="line">    *<span class="javadoctag"> @param</span> amPmFontSize - size of am/pm label (label removed is size is 0).</div><div class="line">    *<span class="javadoctag"> @return</span> format string for 12 hours mode time</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> CharSequence <span class="title">get12ModeFormat</span>() {</div><div class="line">String skeleton = <span class="string">"hma"</span>;</div><div class="line">String pattern = DateFormat.getBestDateTimePattern(Locale.getDefault(), skeleton);</div><div class="line"><span class="keyword">int</span> amPmFontSize=<span class="number">14</span>;</div><div class="line"><span class="comment">// Replace spaces with "Hair Space" </span></div><div class="line">pattern = pattern.replaceAll(<span class="string">" "</span>, <span class="string">"\u200A"</span>);</div><div class="line"><span class="comment">// Build a spannable so that the am/pm will be formatted </span></div><div class="line"><span class="keyword">int</span> amPmPos = pattern.indexOf(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">if</span> (amPmPos == -<span class="number">1</span>) {</div><div class="line">    <span class="keyword">return</span> pattern;</div><div class="line">}</div><div class="line">Spannable sp = <span class="keyword">new</span> SpannableString(pattern);</div><div class="line">sp.setSpan(<span class="keyword">new</span> StyleSpan(android.graphics.Typeface.BOLD), amPmPos, amPmPos + <span class="number">1</span>,</div><div class="line">        Spannable.SPAN_POINT_MARK);</div><div class="line">sp.setSpan(<span class="keyword">new</span> AbsoluteSizeSpan(amPmFontSize), amPmPos, amPmPos + <span class="number">1</span>,</div><div class="line">        Spannable.SPAN_POINT_MARK);</div><div class="line">sp.setSpan(<span class="keyword">new</span> TypefaceSpan(<span class="string">"sans-serif-condensed"</span>), amPmPos, amPmPos + <span class="number">1</span>,</div><div class="line">        Spannable.SPAN_POINT_MARK);</div><div class="line"><span class="keyword">return</span> sp;</div><div class="line">      }</div><div class="line">    }</div></pre></td></tr></table></figure>

<ul>
<li>注释掉以下代码</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//        static String clockView12; </span></div><div class="line"><span class="comment">//            clockView12 = DateFormat.getBestDateTimePattern(locale, clockView12Skel); </span></div><div class="line"><span class="comment">//            if (!clockView12Skel.contains("a")) { </span></div><div class="line">				clockView12 = clockView12.replaceAll(<span class="string">"a"</span>, <span class="string">""</span>).<span class="keyword">trim</span>(); </div><div class="line"><span class="comment">//            }</span></div></pre></td></tr></table></figure>

<ul>
<li>修改以下代码</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mClockView.setFormat12Hour(Patterns.clockView12);</div><div class="line">final String clockView12Skel = <span class="keyword">res</span>.getString(R.<span class="built_in">string</span>.clock_12hr_format);</div></pre></td></tr></table></figure>

<ul>
<li>改为</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mClockView.setFormat12Hour(get12ModeFormat());</div><div class="line">final String clockView12Skel = <span class="keyword">res</span>.getString(R.<span class="built_in">string</span>.keyguard_widget_12_hours_format);</div></pre></td></tr></table></figure>

<ul>
<li>完成以上所有工作并对全局进行<code>make -j4</code>之后锁屏时钟就修改好了</li>
</ul>
<h3 id="桌面时钟-1">桌面时钟</h3>
<pre><code>需要修改的文件：
workspace<span class="regexp">/packages/</span>apps<span class="regexp">/DeskClock/</span>目录下
   res<span class="regexp">/values/</span>strings.xml
   src<span class="regexp">/com/</span>android<span class="regexp">/deskclock/</span>Utils.java
</code></pre><ul>
<li><p>将 <code>strings.xml</code> 中的</p>
<pre><code>  &lt;string <span class="variable">name=</span><span class="string">"main_widget_12_hours_format"</span> <span class="variable">translatable=</span><span class="string">"false"</span>&gt;h&amp;<span class="comment">#58;mm&lt;/string&gt;</span>
</code></pre></li>
<li><p>改为</p>
<pre><code>  <span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"main_widget_12_hours_format"</span> <span class="attribute">translatable</span>=<span class="value">"false"</span>&gt;</span>h&amp;#58;mm<span class="tag">&lt;<span class="title">b</span>&gt;</span><span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">"14"</span> <span class="attribute">face</span>=<span class="value">"sans-serif-condensed"</span>&gt;</span>a<span class="tag">&lt;/<span class="title">font</span>&gt;</span><span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">string</span>&gt;</span>
</code></pre></li>
<li><p>然后在 <code>Utils.java</code> 中将如下部分注释修改即可</p>
<pre><code>   //       <span class="keyword">if</span> (amPmFontSize &lt;= <span class="number">0</span>) {
  //            <span class="variable">pattern =</span> pattern.replaceAll(<span class="string">"a"</span>, <span class="string">""</span>).trim();
  <span class="variable">amPmFontSize=</span><span class="number">14</span>;
  //        }
</code></pre></li>
<li><p>在 <code>DeskClock</code> 文件夹下执行 <code>mm</code> 即可完成编译</p>
</li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/13/Add_ampm_Android/" target="_blank" rel="external">http://chenggoi.com/2015/01/13/Add_ampm_Android/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[为Android 4.2.2 和 Android 4.4.2 的桌面时钟及锁屏时钟添加am/pm显示]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="时钟" scheme="http://chenggoi.com/tags/%E6%97%B6%E9%92%9F/"/>
    
      <category term="添加ampm" scheme="http://chenggoi.com/tags/%E6%B7%BB%E5%8A%A0ampm/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 4.4.2 系统源码字体库精简、添加]]></title>
    <link href="http://chenggoi.com/2015/01/07/Android_Fonts_Customizing/"/>
    <id>http://chenggoi.com/2015/01/07/Android_Fonts_Customizing/</id>
    <published>2015-01-07T07:30:16.000Z</published>
    <updated>2015-01-30T06:03:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境配置">环境配置</h2>
<pre><code>操作系统：Ubuntu <span class="number">14.04</span> <span class="number">64</span>位
Android版本：<span class="number">4.4</span><span class="number">.2</span>
gcc版本：<span class="number">4.4</span>
jdk版本：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><hr>
<h2 id="字体加载原理">字体加载原理</h2>
<p>首先先来阐述一下Android的字体加载原理，Android系统的字体配置文件位于 <code>workspace/frameworks/base/data/fonts/</code> 文件夹下，分为 <code>system_fonts.xml</code> 和 <code>fallback_fonts.xml</code> 两个文件。当系统需要加载字体时，会优先从 <code>system_fonts.xml</code> 文件开始查找，如果没有找到再进入 <code>fallback_fonts.xml</code> 查找。以下是 <code>system_fonts.xml</code> 的部分文件：</p>
<pre><code><span class="tag">&lt;<span class="title">family</span>&gt;</span>
    <span class="tag">&lt;<span class="title">nameset</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>arial<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>helvetica<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>tahoma<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
        <span class="tag">&lt;<span class="title">name</span>&gt;</span>verdana<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">nameset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fileset</span>&gt;</span>
        <span class="tag">&lt;<span class="title">file</span>&gt;</span>Roboto-Regular.ttf<span class="tag">&lt;/<span class="title">file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">file</span>&gt;</span>Roboto-Bold.ttf<span class="tag">&lt;/<span class="title">file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">file</span>&gt;</span>Roboto-Italic.ttf<span class="tag">&lt;/<span class="title">file</span>&gt;</span>
        <span class="tag">&lt;<span class="title">file</span>&gt;</span>Roboto-BoldItalic.ttf<span class="tag">&lt;/<span class="title">file</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fileset</span>&gt;</span>
<span class="tag">&lt;/<span class="title">family</span>&gt;</span>
</code></pre><p>我们称 <code>&lt;family&gt; &lt;/family&gt;</code> 之间的内容为一个字体族， <code>&lt;nameset&gt;&lt;/nameset&gt;</code> 之间的内容为字体的名称， <code>&lt;fileset&gt;&lt;/fileset&gt;</code> 之间的内容为实际调用的字体文件，包括粗体，斜体等。Android字体调用的顺序便是从第一个字体族开始逐个字体族寻找，直到匹配上可以使用的字体便停止寻找。也就是说如果你想添加一些字体并让它显示的话，则要添加到能匹配它的字体之前，这是后话。</p>
<p>总之，Android对于字体就是这样的调用流程，明白了这个后面无论添加还是删除都会好理解一些。</p>
<h2 id="精简字体库">精简字体库</h2>
<p>一般来说， <code>system_fonts.xml</code> 下的字体是为英文等拉丁文字准备的，同上不予以精简（毕竟英语的使用面很广），对于字体的精简大都集中在 <code>fallback_fonts.xml</code> 文件上（看名字也知道这是备用的），这里包括了很多地区的字体以及各种表情符号等。</p>
<p><strong>精简字体的方法：</strong>在 <code>fallback_fonts.xml</code> 文件中注释掉该字体所在的整个字体族，并找到调用他的 <code>Android.mk</code> 和 <code>fonts.mk</code> 文件也将他注释掉，如</p>
<pre><code>fallback_fonts.xml

<span class="comment">&lt;!--    
&lt;family&gt;
      &lt;fileset&gt;
        &lt;file variant="elegant"&gt;DroidNaskh-Regular.ttf&lt;/file&gt;
      &lt;/fileset&gt;
&lt;/family&gt;
--&gt;</span>
</code></pre><hr>
<pre><code>fonts.mk

<span class="preprocessor">#    DroidNaskh-Regular.ttf \</span>
</code></pre><hr>
<pre><code>Android.mk(要注释掉整个include）

<span class="preprocessor">#include $(CLEAR_VARS)</span>
<span class="preprocessor">#LOCAL_MODULE := NotoSansMalayalam-Regular.ttf</span>
<span class="preprocessor">#LOCAL_SRC_FILES := $(LOCAL_MODULE)</span>
<span class="preprocessor">#LOCAL_MODULE_CLASS := ETC</span>
<span class="preprocessor">#LOCAL_MODULE_TAGS := optional</span>
<span class="preprocessor">#LOCAL_MODULE_PATH := $(PRODUCT_OUT)/vendor/fonts</span>
<span class="preprocessor">#include $(BUILD_PREBUILT)</span>
</code></pre><p>精简完以后将整个系统源码 <code>make</code> 一下就可以刷入手机或虚拟机了</p>
<h3 id="附上每个字体对应的语言及所在位置">附上每个字体对应的语言及所在位置</h3>
<h4 id="混合字库（workspace/frameworks/base/data/fonts）">混合字库（<code>workspace/frameworks/base/data/fonts</code>）</h4>
<ul>
<li>显示不同的时间格式<ul>
<li>AndroidClock.ttf</li>
<li>AndroidClock_Highlight.ttf</li>
<li>AndroidClock_Solid.ttf</li>
</ul>
</li>
<li>锁屏时钟<ul>
<li>Clockopia.ttf</li>
</ul>
</li>
<li>Emoji表情符号<ul>
<li>AndroidEmoji.ttf</li>
</ul>
</li>
<li>波斯语、阿拉伯语、乌尔都语字库<ul>
<li>DroidNaskhRegular.ttf </li>
<li>DroidNaskhUIRegular.ttf</li>
</ul>
</li>
<li>亚美尼亚语<ul>
<li>DroidSansArmenian.ttf </li>
</ul>
</li>
<li>阿姆哈拉语、提格雷语(埃塞俄比亚)<ul>
<li>DroidSansEthiopicRegular.ttf </li>
</ul>
</li>
<li>中日韩字库，包含完整中文<ul>
<li>DroidSansFallback.ttf </li>
</ul>
</li>
<li>格鲁吉亚语<ul>
<li>DroidSansGeorgian.ttf </li>
</ul>
</li>
<li>希伯来语<ul>
<li>DroidSansHebrewBold.ttf </li>
<li>DroidSansHebrewRegular.ttf</li>
</ul>
</li>
<li>西里尔和拉丁字母扩充附加<ul>
<li>DroidSansMono.ttf </li>
</ul>
</li>
<li>拉丁字母:衬线体<ul>
<li>DroidSerifBold.ttf </li>
<li>DroidSerifBoldItalic.ttf</li>
<li>DroidSerifItalic.ttf</li>
<li>DroidSerifRegular.ttf</li>
</ul>
</li>
<li>繁体中文字库<ul>
<li>MTLmr3m.ttf </li>
</ul>
</li>
<li>谚文字母(朝鲜语、韩语)<ul>
<li>NanumGothic.ttf </li>
</ul>
</li>
<li>官方缅甸语字库<ul>
<li>padauk.ttf </li>
</ul>
</li>
<li>民间缅甸语字库<ul>
<li>ZawgyiOne.ttf </li>
</ul>
</li>
<li>欧洲使用的拉丁、西里尔字母<ul>
<li>Roboto-Regular.ttf</li>
<li>Roboto-Bold.ttf</li>
<li>Roboto-Italic.ttf</li>
<li>Roboto-BoldItalic.ttf</li>
<li>Roboto-Light.ttf</li>
<li>Roboto-LightItalic.ttf</li>
<li>Roboto-Thin.ttf</li>
<li>Roboto-ThinItalic.ttf</li>
<li>RobotoCondensed-Regular.ttf</li>
<li>RobotoCondensed-Bold.ttf</li>
<li>RobotoCondensed-Italic.ttf</li>
<li>RobotoCondensed-BoldItalic.ttf</li>
</ul>
</li>
</ul>
<h4 id="Noto字库：_workspace/external/noto-fonts">Noto字库： <code>workspace/external/noto-fonts</code></h4>
<ul>
<li>表情字符<ul>
<li>NotoColorEmoji.ttf </li>
</ul>
</li>
<li>孟加拉语字库<ul>
<li>NotoSansBengali-Regular.ttf</li>
<li>NotoSansBengali-Bold.ttf</li>
<li>NotoSansBengaliUIBold.ttf </li>
<li>NotoSansBengaliUIRegular.ttf</li>
</ul>
</li>
<li>印度语字库<ul>
<li>NotoSansDevanagari-Regular.ttf <ul>
<li>NotoSansDevanagari-Bold.ttf </li>
</ul>
</li>
<li>NotoSansDevanagariUIBold.ttf </li>
<li>NotoSansDevanagariUIRegular.ttf</li>
</ul>
</li>
<li>卡纳达语字库(印度)<ul>
<li>NotoSansKannada-Regular.ttf </li>
<li>NotoSansKannada-Bold.ttf </li>
<li>NotoSansKannadaUIBold.ttf </li>
<li>NotoSansKannadaUIRegular.ttf</li>
</ul>
</li>
<li>高棉语字库(柬埔寨)<ul>
<li>NotoSansKhmer-Regular.ttf</li>
<li>NotoSansKhmer-Bold.ttf</li>
<li>NotoSansKhmerUIBold.ttf </li>
<li>NotoSansKhmerUIRegular.ttf</li>
</ul>
</li>
<li>老挝语字库<ul>
<li>NotoSansLao-Regular.ttf</li>
<li>NotoSansLao-Bold.ttf</li>
<li>NotoSansLaoUIBold.ttf </li>
<li>NotoSansLaoUIRegular.ttf</li>
</ul>
</li>
<li>马拉雅拉姆文字库(印度)<ul>
<li>NotoSansMalayalam-Regular.ttf </li>
<li>NotoSansMalayalam-Bold.ttf</li>
<li>NotoSansMalayalamUIBold.ttf </li>
<li>NotoSansMalayalamUIRegular.ttf</li>
</ul>
</li>
<li>泰米尔语字库(印度、斯里兰卡、新加坡)<ul>
<li>NotoSansTamil-Regular.ttf</li>
<li>NotoSansTamil-Bold.ttf</li>
<li>NotoSansTamilUIBold.ttf </li>
<li>NotoSansTamilUIRegular.ttf</li>
</ul>
</li>
<li>泰卢固语(印度)<ul>
<li>NotoSansTelugu-Regular.ttf</li>
<li>NotoSansTelugu-Bold.ttf</li>
<li>NotoSansTeluguUIBold.ttf </li>
<li>NotoSansTeluguUIRegular.ttf</li>
</ul>
</li>
<li>泰语字库<ul>
<li>NotoSansThai-Regular.ttf</li>
<li>NotoSansThai-Bold.ttf</li>
<li>NotoSansThaiUIBold.ttf </li>
<li>NotoSansThaiUIRegular.ttf </li>
</ul>
</li>
</ul>
<h4 id="NanumGothic（workspace/external/naver-fonts)">NanumGothic（<code>workspace/external/naver-fonts</code>)</h4>
<ul>
<li>韩文字体<ul>
<li>NanumGothic.ttf</li>
<li>NanumGothicBold.ttf </li>
</ul>
</li>
</ul>
<h2 id="添加字体">添加字体</h2>
<p>添加字体这块我就直接给个链接啦，因为本人也没有尝试过，所以不敢妄言啊。</p>
<ul>
<li><a href="https://www.librehat.com/elegant-and-geek-way-to-add-or-change-android-system-fonts/" target="_blank" rel="external">优雅并极客地添加/更改Android系统的字体</a></li>
<li><a href="http://blog.oubeichen.com/201303/anzhuoshenruzitipeizhiwenjian/" target="_blank" rel="external">安卓深入字体配置文件</a></li>
</ul>
<h2 id="ICU语言包精简">ICU语言包精简</h2>
<p>最后，如果大家还想要对语言包进行精简的话，可以参考我的另一篇文章</p>
<p><a href="http://chenggoi.github.io/2015/01/06/Android-ICU-Customizing.html" target="_blank" rel="external">Android 4.4.2 ICU 语言包 精简、裁剪、定制、本地化</a></p>
<p><strong>参考资料</strong></p>
<p><a href="http://blog.csdn.net/zhoumushui/article/details/41623903" target="_blank" rel="external">Android字库文件简介</a></p>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/07/Android_Fonts_Customizing/" target="_blank" rel="external">http://chenggoi.com/2015/01/07/Android_Fonts_Customizing/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[精简或者添加Android系统源码的Fonts文件夹中.mk文件所调用的ttf文件，以达到定制字体库的目的]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 4.4.2 ICU 语言包 精简、裁剪、定制、本地化]]></title>
    <link href="http://chenggoi.com/2015/01/06/Android_ICU_Customizing/"/>
    <id>http://chenggoi.com/2015/01/06/Android_ICU_Customizing/</id>
    <published>2015-01-06T07:30:16.000Z</published>
    <updated>2015-01-30T06:05:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2>
<p>最近接到了精简Android 4.4.2系统源码中的ICU4c语言包的任务，随即百度谷歌一通找，可是找来找去结果很不令人满意。大部分结果都是如何添加语言包实现国际化的，而且多是基于ICU48及更早的版本（也就是Android 4.2.2版本及之前版本），由于ICU51相比较旧版本在配置方面有很大改动，所以网上的方案大多行不通，特在此总结一下。</p>
<h3 id="环境配置">环境配置</h3>
<pre><code>操作系统：Ubuntu <span class="number">14.04</span> <span class="number">64</span>位
Android版本：<span class="number">4.4</span><span class="number">.2</span>
ICU版本：ICU <span class="number">51</span>
gcc版本：<span class="number">4.4</span>
jdk版本：<span class="number">1.6</span> <span class="number">71u</span>
</code></pre><hr>
<p><strong>声明：</strong>本方法目前还存在如下缺陷,如有解决方案望告知：</p>
<ol>
<li>locals文件夹中的 <code>ps.txt</code> 及 <code>ps_AF.txt</code> 文件不能在 <code>*.mk</code> 中删除，貌似是阿富汗语关联，但是始终没有找到在哪里被调用，删除会报错</li>
<li>如果要保留如 <code>zh_CN.txt</code> 文件，则要将以 <code>zh</code> 开头的所有txt文件都保留，即全部保留在 <code>*.mk</code> 中，因为在脚本中是使用的对 <code>zh.txt</code> 及 <code>zh_*.txt</code> 这样的遍历方式，如果只删除了部分文件会提示 <code>can not open xxx.xx</code> 也就是文件缺失</li>
<li>本文内有部分很有帮助的网站由于某些原因无法连接（你懂得），所以我觉得想做Android系统开发的话 <code>fq</code> 技术是必须的</li>
</ol>
<h2 id="正文">正文</h2>
<h3 id="1-_哪些包可以被裁减（以下所列文件夹均在_(icu_PATH)/data/_目录下）">1. 哪些包可以被裁减（以下所列文件夹均在 <code>(icu_PATH)/data/</code> 目录下）</h3>
<p><strong><em>首先说明，所谓的裁剪，并非是将文件夹内的 <code>*.txt</code> 文件直接删除，而是通过修改 <code>*.mk</code> 文件来屏蔽掉不需要的字库。修改时注意上文声明的两点。</em></strong></p>
<p><strong><em>其次强调一下 <code>.mk</code> 的简单语法，知道的可以略过。 <code>#</code> 号代表注释后面一行的内容，每个txt文件的文件名要用空格隔开，如需换行要在行尾打 <code>\</code> 且后面不能有任何的空格或其他字符，每行之间不能有无关字符混入，注释也不可以，所以注释的话要移到文件尾部。</em></strong></p>
<ul>
<li>文本转换信息<ul>
<li>mappings/ucmfiles.mk </li>
<li>mappings/ucmcore.mk </li>
<li>mappings/ucmebcdic.mk </li>
<li>方法：直接用 <code>#</code> 注释掉不需要的文件名并直接移至文件尾部（当然也可以考虑直接删除，不过这样就没后路了）</li>
<li>参考该网站可了解每个文件是干什么的(也可以通过该网站直接定制dat包，并且下面有不同版本的选择)：<a href="http://apps.icu-project.org/datacustom/ICUData51.html" target="_blank" rel="external">ICU Data Library Customizer</a></li>
</ul>
</li>
<li>基于数字规格的语音转换<ul>
<li>brkiter/brkfiles.mk</li>
<li>方法：修改或者新建（如果没有） <code>brklocal.mk</code> 文件，并将 <code>brkfiles.mk</code>  的内容复制进去，然后删除不需要的文件名即可</li>
<li>字符串本地化的排序比较相关</li>
<li>coll/collfiles.mk</li>
<li>方法：修改或者新建（如果没有） <code>collocal.mk</code> 文件，并将 <code>collfiles.mk</code> 的内容复制进去，然后删除不需要的文件名即可</li>
</ul>
</li>
<li>为网络协议提供本地化字符串转换(如网址可以输入中文，阿拉伯文等)<ul>
<li>spreg/spregfiles.mk</li>
<li>方法：修改或者新建（如果没有） <code>spreplocal.mk</code> 文件，并将 <code>spregfiles.mk</code> 的内容复制进去，然后删除不需要的文件名即可</li>
</ul>
</li>
<li>脚本语言转化 <ul>
<li>translit/trnsfiles.mk</li>
<li>方法：修改或者新建（如果没有） <code>trnslocal.mk</code> 文件，并将 <code>trnsfiles.mk</code> 的内容复制进去，然后删除不需要的文件名即可 </li>
</ul>
</li>
<li>时间，货币，计数等本地化的格式<ul>
<li>curr/resfiles.mk</li>
<li>zone/resfiles.mk</li>
<li>region/resfiles.mk</li>
<li>lang/resfiles.mk</li>
<li>locals/resfiles</li>
<li>方法：在相应的的文件夹下修改或者新建（如果没有） <code>reslocal.mk</code> 文件，并将 <code>resfiles.mk</code> 的内容复制进去，然后删除不需要的文件名即可 </li>
</ul>
</li>
<li>杂项文件<ul>
<li>misc/miscfiles.mk</li>
<li>方法：修改或者新建（如果没有） <code>misclocal.mk</code> 文件，并将 <code>miscfiles.mk</code> 的内容复制进去，然后删除不需要的文件名即可</li>
</ul>
</li>
</ul>
<h3 id="2-编译修改的这些文件，生成_icudt51l-dat_文件">2.编译修改的这些文件，生成 <code>icudt51l.dat</code> 文件</h3>
<ul>
<li>打开终端，切换到icu4c目录下</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd ~<span class="regexp">/workspace/external</span><span class="regexp">/icu4c/</span></div></pre></td></tr></table></figure>

<ul>
<li>新建一个临时文件夹，并进入该文件夹</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> icuBuild</div><div class="line">$ <span class="keyword">cd</span> icuBuild/</div></pre></td></tr></table></figure>

<ul>
<li>使用管理员权限运行配置文件</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> ../runConfigureICU  Linux</div></pre></td></tr></table></figure>

<ul>
<li>使用管理员权限编译ICU</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> make -j2</div></pre></td></tr></table></figure>

<ul>
<li><p>编译过程中如果出现 <code>can not open xxx</code> 的错误请参考文章开头的声明，如果依旧无法解决则将缺少的文件添加进去即可，目前还没有出现过其他问题，如果有则只好自行百度</p>
</li>
<li><p>编译成功的话那么恭喜你，已经完成了一半，在 <code>icuBuild/data/out/tmp/</code> 文件夹中找到 <code>icudt51l.dat</code> 文件，并将其复制到根目录下的 <code>stubdata/</code> 文件夹中并替换掉 <code>icudt51l-all.dat</code> 文件，并切换到该文件夹，即</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cp</span> data/out/tmp/icudt51l.dat ../stubdata/icudt51l-<span class="keyword">all</span>.dat</div><div class="line">$ <span class="keyword">cd</span> ../stubdata/</div></pre></td></tr></table></figure>



<ul>
<li>接下来修改 <code>icu_dat_generator.py</code> 这个文件，找到 <code>GenResIndex()</code> 这个函数，并屏蔽掉 <code>languages</code> 里不需要的语言,如</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">languages = [</div><div class="line">    <span class="comment"># Group 0.</span></div><div class="line">    <span class="string">'en'</span>,</div><div class="line"></div><div class="line">    <span class="comment"># Group 1.</span></div><div class="line">    <span class="comment">#'ar',</span></div><div class="line">    <span class="string">'zh'</span>,</div><div class="line">    <span class="comment">#'nl',</span></div><div class="line">    <span class="comment">#'fr',</span></div><div class="line">    <span class="comment">#'de',</span></div><div class="line">    <span class="comment">#'it',</span></div><div class="line">    <span class="comment">#'ja',</span></div><div class="line">	<span class="keyword">...</span></div></pre></td></tr></table></figure>

<ul>
<li>接下来修改 <code>icu-data-default.txt</code> 这个文件，这个文件就是与之前的版本不同，里面的内容决定了编译的时候需要哪些文件，如果不会改的话可以先运行一下脚本</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./icu_dat_generator.<span class="keyword">py</span></div></pre></td></tr></table></figure>

<ul>
<li><p>看看报错提示缺少什么，然后再到该文件中 <code>Ctrl+F</code> ，如果存在并确定无用则将其用 <code>#</code> 注释掉，如果没有找到，就要回到最开始的步骤，将缺少的文件及其关联都添加进去，然后重新打包生成 <code>icudt51l.dat</code> 文件并重复以上步骤，直到生成 <code>icudt51l-default.dat</code> 即表示编译成功</p>
</li>
<li><p>编译成功之后删除 <code>icuBuild</code> 文件夹并切换到Android的根目录下对全局 <code>make</code> 一下即可</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>rm -rf icuBuild/</div><div class="line"><span class="variable">$ </span>cd ../../..</div><div class="line"><span class="variable">$ </span>make -j4</div></pre></td></tr></table></figure>

<ul>
<li>OK~将生成的 <code>system.img</code> 赶紧刷到手机里或者模拟器里看看效果吧</li>
</ul>
<h2 id="总结">总结</h2>
<p>本人也是刚入行的菜鸟，可能解决方法并不完美，也存在一些无法解决的问题，本文旨在为大家提供一些思路，少走一点弯路，如果有什么好的意见和建议欢迎留言或者email我，另提一句，我将语言精简到只剩三个， <code>system.img</code> 大概缩小了10m左右。</p>
<p><strong>以下提供一些参考网站：</strong></p>
<ul>
<li><p>官方文档（推荐阅读，不过需要fq以及不错的英文水平）</p>
<ul>
<li><a href="http://userguide.icu-project.org/icudata#TOC-Reducing-the-Size-of-ICU-s-Data:-Locale-Data" target="_blank" rel="external">ICU Data的定制（Customizing）相关说明及原理</a></li>
<li><a href="http://apps.icu-project.org/datacustom/ICUData51.html" target="_blank" rel="external">ICU Data Library Customizer</a></li>
<li><a href="http://androidxref.com/4.4.2_r1/" target="_blank" rel="external">Androidxref，检索源码</a> </li>
</ul>
</li>
<li><p>参考文档(大概是我搜到的所有中文文档了，算是做个归纳吧)</p>
<ul>
<li><a href="http://baike.baidu.com/view/8177861.htm" target="_blank" rel="external">语言代码</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_4fcc6ef20101pjp0.html" target="_blank" rel="external">icu4c中资源的修改，编译</a> </li>
<li><a href="http://blog.csdn.net/jiayouxjh/article/details/8613541" target="_blank" rel="external">Android系统多语言支持总结文档</a></li>
<li><a href="http://www.linuxidc.com/Linux/2012-04/58964.htm" target="_blank" rel="external">Android新增语言的方法（墨西哥的西班牙语）</a></li>
<li><a href="http://www.cnblogs.com/KiloNet/p/3145791.html" target="_blank" rel="external">编译android源码中的icu4c</a></li>
<li><a href="http://blog.csdn.net/foolenough/article/details/38112043" target="_blank" rel="external"> ICU移植到Android与ICUData裁剪</a></li>
<li><a href="http://blog.csdn.net/yicao821/article/details/17559851" target="_blank" rel="external">android添加新语言之缅甸语</a></li>
<li><a href="http://blog.csdn.net/eimsteim/article/details/7246175" target="_blank" rel="external">Android 语言资源库的添加</a></li>
</ul>
</li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/06/Android_ICU_Customizing/" target="_blank" rel="external">http://chenggoi.com/2015/01/06/Android_ICU_Customizing/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[对ICU51语言包进行精简 本地化]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SDK Manager更新速度慢]]></title>
    <link href="http://chenggoi.com/2015/01/01/SDK_Manager/"/>
    <id>http://chenggoi.com/2015/01/01/SDK_Manager/</id>
    <published>2015-01-01T07:30:16.000Z</published>
    <updated>2015-01-30T06:06:16.000Z</updated>
    <content type="html"><![CDATA[<p>1、打开tools-&gt;opinion</p>
<p>2、设置HTTP Proxy server：mirrors.neusoft.edu.cn</p>
<p>3、设置HTTP Proxy Port：80</p>
<p>4、选中Force ..<a href="https://...sources" target="_blank" rel="external">https://...sources</a> to be fetched using http:</p>
<p>5、关闭，重新更新</p>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/01/SDK_Manager/" target="_blank" rel="external">http://chenggoi.com/2015/01/01/SDK_Manager/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[更新SDK缓慢解决方案]]>
    
    </summary>
    
      <category term="Android" scheme="http://chenggoi.com/tags/Android/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown的常用语法]]></title>
    <link href="http://chenggoi.com/2015/01/01/markdown/"/>
    <id>http://chenggoi.com/2015/01/01/markdown/</id>
    <published>2015-01-01T07:30:16.000Z</published>
    <updated>2015-01-30T06:05:39.000Z</updated>
    <content type="html"><![CDATA[<p><strong>声明：</strong>本文仅针对本人的日常使用，并非Markdown的完整语法，也不做原理性的分析，如有需要请出门百度</p>
<h2 id="段落和换行">段落和换行</h2>
<ul>
<li>方法一：段落末尾按两次回车，即保证段落的前后都有一行以上的空行</li>
<li>方法二：在段落内按两次空格一次回车即可强制换行,即起到  <code>&lt;br /&gt;</code> 的效果</li>
</ul>
<h2 id="标题">标题</h2>
<ul>
<li>在行首插入1到6个 <code>#</code> ，表示1到6阶标题，例：<pre><code>  <span class="comment"># 1阶标题</span>
  <span class="comment">## 2阶标题</span>
  <span class="comment">###### 6阶标题</span>
</code></pre><h2 id="区块引用">区块引用</h2>
</li>
<li>在要引用的每行加上<code>&gt;</code>即为引用，也可<code>&gt; &gt;</code>嵌套引用(注意每个<code>&gt;</code>后面要加空格)，例：<pre><code>  &gt; 我是第一行
  &gt; 我是第二行
  &gt; &gt; 嵌套引用
</code></pre></li>
<li><p>效果为：</p>
<blockquote>
<p>我是第一行</p>
<p>我是第二行</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="无序列表">无序列表</h2>
<ul>
<li>在文字开头使用 <code>-</code> 或者 <code>+</code> 或者 <code>*</code> (注意每个后面都要加空格)，则形成无序列表，例：<pre><code>  -<span class="ruby"> a
</span>  + b
  * c
</code></pre></li>
<li>效果为：<ul>
<li>a</li>
</ul>
<ul>
<li>b</li>
</ul>
<ul>
<li>c</li>
</ul>
</li>
</ul>
<h2 id="有序列表">有序列表</h2>
<ul>
<li>数字后面跟上<code>.</code>以及空格，可以乱序，会自动顺序输出，但最好第一行为<code>1.</code>，例：<pre><code>  <span class="number">1</span>. a
  <span class="number">3</span>. <span class="built_in">c</span>
  <span class="number">2</span>. b
</code></pre></li>
<li>效果为：<ol>
<li>a</li>
<li>c</li>
<li>b</li>
</ol>
</li>
</ul>
<h2 id="斜体粗体">斜体粗体</h2>
<ul>
<li>将需要斜体的文字两端使用1个<code>*</code>或者<code>_</code>夹起来</li>
<li><p>将需要加粗的文字两端使用2个<code>*</code>或者<code>_</code>夹起来</p>
<pre><code>  <span class="keyword">*</span>斜体<span class="keyword">*</span> _斜体_ <span class="keyword">*</span><span class="keyword">*</span>粗体<span class="keyword">*</span><span class="keyword">*</span> __粗体__
</code></pre><p>效果为：</p>
<p><em>斜体</em>  <em>斜体</em> <strong>粗体</strong> <strong>粗体</strong></p>
</li>
</ul>
<h2 id="代码">代码</h2>
<ul>
<li>对于代码区块，只需要简单的缩进四个空格或者一个Tab即可</li>
<li>对于单行的代码注释可使用两个<code>` </code>将其夹起来，例<pre><code>  <span class="code">`aaa`</span>
</code></pre>效果为：<br><code>aaa</code></li>
</ul>
<h2 id="分割线">分割线</h2>
<ul>
<li>可以在一行中使用三个以上的<code>*</code>或者<code>-</code>或者<code>_</code>来建立分割线，例：<pre><code>  1
  ---
  2
  ___
  3
  <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>
</code></pre>效果为：</li>
</ul>
<p>1</p>
<hr>
<p>2</p>
<hr>
<p>3</p>
<hr>
<h2 id="链接">链接</h2>
<ul>
<li>内联方式：<code>This is an [example link](http://baidu.com/)</code></li>
<li>引用方式（注意换行，网址写全且顶头）：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">This</span> <span class="keyword">is</span> an [example link][<span class="keyword">ref</span>]</div><div class="line">[<span class="keyword">ref</span>]:http://baidu.com</div></pre></td></tr></table></figure>

<p>效果为：</p>
<ul>
<li>This is an <a href="http://baidu.com/" target="_blank" rel="external">example link</a></li>
<li>This is an <a href="http://7tsyx2.com1.z0.glb.clouddn.com/logo.jpg" target="_blank" rel="external">example link</a>.</li>
</ul>
<h2 id="图片">图片</h2>
<ul>
<li>内联方式：<code>![example](http://7tsyx2.com1.z0.glb.clouddn.com/logo.jpg)</code></li>
<li>外联方式（注意换行，网址写全且顶头）：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![example][<span class="keyword">ref</span>]</div><div class="line">[<span class="keyword">ref</span>]:http://<span class="number">7</span>tsyx2.com1.z0.glb.clouddn.com/logo.jpg</div></pre></td></tr></table></figure>

<p>效果为：</p>
<ul>
<li><img src="http://7tsyx2.com1.z0.glb.clouddn.com/logo.jpg" alt="example"></li>
<li><img src="http://7tsyx2.com1.z0.glb.clouddn.com/logo.jpg" alt="example"></li>
</ul>
<h2 id="自动连接">自动连接</h2>
<ul>
<li><p>使用<code>&lt;&gt;</code>将输入的URL及邮箱夹在中间，例:</p>
<pre><code>  <span class="tag">&lt;<span class="title">http:</span>//<span class="attribute">www.baidu.com</span>&gt;</span>
  <span class="tag">&lt;<span class="title">chenggoi@sina.com</span>&gt;</span>
</code></pre><p>效果为：</p>
<p><a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a></p>
<p><a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x74;&#x65;&#115;&#x74;&#x40;&#99;&#104;&#101;&#110;&#103;&#x67;&#111;&#x69;&#46;&#x63;&#x6f;&#109;">&#x74;&#x65;&#115;&#x74;&#x40;&#99;&#104;&#101;&#110;&#103;&#x67;&#111;&#x69;&#46;&#x63;&#x6f;&#109;</a></p>
</li>
</ul>
<h2 id="转义字符">转义字符</h2>
<ul>
<li>\\表示<code>\</code></li>
<li>\`表示<code>` </code></li>
<li>\_表示<code>_</code></li>
<li>\*表示<code>*</code></li>
<li>\{\}表示<code>{}</code></li>
<li>\[\]表示<code>[]</code></li>
<li>\(\)表示<code>()</code></li>
<li>\#表示<code>#</code></li>
<li>\+表示<code>+</code></li>
<li>\-表示<code>-</code></li>
<li>\.表示<code>.</code></li>
<li>\!表示<code>!</code></li>
</ul>
<p><strong>原文链接：</strong><a href="http://chenggoi.com/2015/01/01/markdown/" target="_blank" rel="external">http://chenggoi.com/2015/01/01/markdown/</a>,转载请注明出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[Markdown的简单知识]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://chenggoi.com/tags/Markdown/"/>
    
      <category term="技术" scheme="http://chenggoi.com/categories/code/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My first blog]]></title>
    <link href="http://chenggoi.com/2014/12/15/HelloWorlds/"/>
    <id>http://chenggoi.com/2014/12/15/HelloWorlds/</id>
    <published>2014-12-15T07:30:16.000Z</published>
    <updated>2015-01-10T06:42:43.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>目前使用还不纯熟的Markdown语法</li>
<li>感觉像是被坑了一样的编辑器</li>
<li>有空就上来写两笔吧</li>
<li>北漂开始了</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[初出茅庐]]>
    
    </summary>
    
      <category term="心情" scheme="http://chenggoi.com/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="随笔" scheme="http://chenggoi.com/categories/life/"/>
    
  </entry>
  
</feed>
